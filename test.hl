(defun map (f lst) (if (= (length lst) 0) [] (++ [(f (head lst))] (map f (tail lst)))))
(defun filter (f lst) (if (= (length lst) 0) [] (if (f (head lst)) (++ [(head lst)] (filter f (tail lst))) (filter f (tail lst))))) 
(defun empty? (lst) (= (length lst) 0))
(defun foldr (f v lst) 
        (if (empty? lst) 
            v
            (f (head lst) (foldr f v (tail lst)))))

(defun reverse (lst) (foldr (lambda (head tail) (++ tail [head])) [] lst))

(defun print-emptiness (lst) (if (empty? lst) (print "empty\"!\"") (print "nop\"e\n")))

(print (eval '[1 ~ 10]))

